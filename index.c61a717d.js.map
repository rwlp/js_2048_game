{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    // This are variables used in entire instance of class\n    #SIZE = 4;\n    #score = 0;\n    #state = [];\n    #status = \"\";\n    #initialState = undefined;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        if (!initialState) {\n            this.#state = new Array(this.#SIZE).fill(0);\n            for(const i in this.#state)this.#state[i] = new Array(this.#SIZE).fill(0);\n            this.#initialState = this.#getStateCopy();\n        } else {\n            this.#state = this.#getStateCopy(initialState);\n            this.#initialState = this.#getStateCopy();\n        }\n        this.#status = \"idle\";\n    }\n    // This is a required method\n    moveLeft() {\n        this.#makeMove();\n    }\n    // This is a required method\n    moveRight() {\n        this.#reverse();\n        this.#makeMove();\n        this.#reverse();\n    }\n    // This is a required method\n    moveUp() {\n        this.#tranpose();\n        this.#makeMove();\n        this.#tranpose();\n    }\n    // This is a required method\n    moveDown() {\n        this.#tranpose();\n        this.#reverse();\n        this.#makeMove();\n        this.#reverse();\n        this.#tranpose();\n    }\n    /**\n   * This is a required method.\n   *\n   * @returns {number}\n   */ getScore() {\n        return this.#score;\n    }\n    /**\n   * This is a requirement method.\n   *\n   * @returns {number[][]}\n   */ getState() {\n        return this.#getStateCopy();\n    }\n    /**\n   * Returns the current game status.\n   * This is a requirement method\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.#status;\n    }\n    /**\n   * Update game status.\n   *\n   * @param {string} value\n   *\n   */ setStatus(value) {\n        this.#status = value;\n    }\n    /**\n   * This method shoud be private, but the tests consider it as public\n   */ start() {\n        this.#score = 0;\n        this.#status = \"playing\";\n        this.#state = this.#getStateCopy(this.#initialState);\n        // Is called twice by requirements\n        this.#randomizer();\n        this.#randomizer();\n    }\n    // Resets the game.\n    restart() {\n        this.#score = 0;\n        this.#status = \"playing\";\n        this.#state = this.#getStateCopy(this.#initialState);\n        this.#status = \"idle\";\n    }\n    /**\n   * Put 2 or 4 in freely cells if they exists\n   */ #randomizer() {\n        const empties = [];\n        let idxSorted;\n        for(let line = 0; line < this.#SIZE; line++){\n            for(let column = 0; column < this.#SIZE; column++)if (this.#state[line][column] === 0) empties.push([\n                line,\n                column\n            ]);\n        }\n        if (empties.length > 0) {\n            idxSorted = Math.floor(Math.random() * empties.length);\n            this.#state[empties[idxSorted][0]][empties[idxSorted][1]] = Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n        }\n    }\n    // Matrix transformation transpose operation.\n    #tranpose() {\n        let tempRetriveVar;\n        for(let ln = 0; ln < this.#SIZE; ln++)for(let cl = ln; cl < this.#SIZE; cl++){\n            tempRetriveVar = this.#state[ln][cl];\n            this.#state[ln][cl] = this.#state[cl][ln];\n            this.#state[cl][ln] = tempRetriveVar;\n        }\n    }\n    // Only reverte this.#state array lines, it dont to revert any array.\n    #reverse() {\n        this.#state.forEach((e, i, arr)=>arr[i].reverse());\n    }\n    // Check if movements isn't possible than change this.status.\n    #checkIfLose() {\n        let allSides = [];\n        for(let column = 0; column < this.#SIZE; column++)for(let line = 0; line < this.#SIZE; line++){\n            if (this.#state[line][column] !== 0) {\n                allSides.push(this.#state[line - 1] !== undefined ? this.#state[line - 1][column] : undefined);\n                allSides.push(this.#state[line + 1] !== undefined ? this.#state[line + 1][column] : undefined);\n                allSides.push(this.#state[line][column + 1]);\n                allSides.push(this.#state[line][column - 1]);\n                if (allSides.includes(0) || allSides.includes(this.#state[line][column])) return false;\n            } else return false;\n            allSides = [];\n        }\n        return true;\n    }\n    /**\n   * This method copy two dimensional array.\n   * In this code is always used to copy the state Two dimensional Array\n   *\n   * @param {Array} arr\n   * @returns\n   */ #getStateCopy(arr = this.#state) {\n        return arr.map((e)=>[\n                ...e\n            ]);\n    }\n    // Make left movement by default\n    #makeMove() {\n        if (this.#status === \"playing\") {\n            const previousState = this.#getStateCopy().flat();\n            for(const line in this.#state){\n                let nonZeros = this.#state[line].filter((e)=>e !== 0);\n                let i = 0;\n                while(i < nonZeros.length){\n                    if (nonZeros[i + 1] === nonZeros[i]) {\n                        nonZeros[i + 1] = 0;\n                        nonZeros[i] *= 2;\n                        this.#score += nonZeros[i];\n                        if (nonZeros[i] === 2048) this.#status = \"win\";\n                        i += 2;\n                        continue;\n                    }\n                    i++;\n                }\n                nonZeros = nonZeros.filter((e)=>e !== 0);\n                this.#state[line] = [\n                    ...nonZeros,\n                    ...new Array(this.#SIZE - nonZeros.length).fill(0)\n                ];\n            }\n            if (this.#state.flat().some((e, i)=>e !== previousState[i])) this.#randomizer();\n        }\n        this.#status = this.#checkIfLose() ? \"lose\" : this.#status;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Get all DOM Elements in variables.\nconst $09e991522ca7e64e$var$cells = document.getElementsByClassName(\"field-cell\");\nconst $09e991522ca7e64e$var$score = document.getElementsByClassName(\"game-score\")[0];\nconst $09e991522ca7e64e$var$startAndRestartButton = document.getElementsByClassName(\"button\")[0];\nconst $09e991522ca7e64e$var$messages = document.getElementsByClassName(\"message\");\n// Init inner objects and variables that are use in entire file\nconst $09e991522ca7e64e$var$bgColorByNumber = {\n    2: \"field-cell--2\",\n    4: \"field-cell--4\",\n    8: \"field-cell--8\",\n    16: \"field-cell--16\",\n    32: \"field-cell--32\",\n    64: \"field-cell--64\",\n    128: \"field-cell--128\",\n    256: \"field-cell--256\",\n    512: \"field-cell--512\",\n    1024: \"field-cell--1024\",\n    2048: \"field-cell--2048\"\n};\nconst $09e991522ca7e64e$var$actions = {\n    idle: ()=>{\n        $09e991522ca7e64e$var$game.setStatus(\"playing\");\n        $09e991522ca7e64e$var$actions.playing();\n        $09e991522ca7e64e$var$messages[0].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[1].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[2].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[3].classList.remove(\"hidden\");\n    },\n    playing: ()=>{\n        for(let line = 0; line < 4; line++)for(let column = 0; column < 4; column++)$09e991522ca7e64e$var$cells[line * 4 + column].textContent = $09e991522ca7e64e$var$game.getState()[line][column] || \"\";\n        $09e991522ca7e64e$var$setStyles();\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    },\n    win: ()=>{\n        $09e991522ca7e64e$var$actions.playing();\n        $09e991522ca7e64e$var$messages[0].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[1].classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messages[2].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[3].classList.add(\"hidden\");\n    },\n    lose: ()=>{\n        $09e991522ca7e64e$var$actions.playing();\n        $09e991522ca7e64e$var$messages[0].classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messages[1].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[2].classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messages[3].classList.add(\"hidden\");\n    }\n};\nfunction $09e991522ca7e64e$var$bindState(arg) {\n    $09e991522ca7e64e$var$actions[arg]();\n}\nconst $09e991522ca7e64e$var$setStyles = ()=>{\n    for (const cell of $09e991522ca7e64e$var$cells)cell.className = $09e991522ca7e64e$var$bgColorByNumber[cell.textContent] ? \"field-cell \" + $09e991522ca7e64e$var$bgColorByNumber[cell.textContent] : \"field-cell\";\n};\n// Event Listeners\ndocument.addEventListener(\"keydown\", (eventKey)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        if (eventKey.key === \"ArrowDown\") {\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$bindState($09e991522ca7e64e$var$game.getStatus());\n        } else if (eventKey.key === \"ArrowUp\") {\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$bindState($09e991522ca7e64e$var$game.getStatus());\n        } else if (eventKey.key === \"ArrowRight\") {\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$bindState($09e991522ca7e64e$var$game.getStatus());\n        } else if (eventKey.key === \"ArrowLeft\") {\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$bindState($09e991522ca7e64e$var$game.getStatus());\n        }\n    }\n});\n$09e991522ca7e64e$var$startAndRestartButton.addEventListener(\"click\", (clickStartRestartEvent)=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$bindState($09e991522ca7e64e$var$game.getStatus());\n    $09e991522ca7e64e$var$setStyles();\n    $09e991522ca7e64e$var$startAndRestartButton.classList.add(\"restart\");\n});\n\n\n//# sourceMappingURL=index.c61a717d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Get all DOM Elements in variables.\nconst cells = document.getElementsByClassName('field-cell');\nconst score = document.getElementsByClassName('game-score')[0];\nconst startAndRestartButton = document.getElementsByClassName('button')[0];\nconst messages = document.getElementsByClassName('message');\n\n// Init inner objects and variables that are use in entire file\nconst bgColorByNumber = {\n  2: 'field-cell--2',\n  4: 'field-cell--4',\n  8: 'field-cell--8',\n  16: 'field-cell--16',\n  32: 'field-cell--32',\n  64: 'field-cell--64',\n  128: 'field-cell--128',\n  256: 'field-cell--256',\n  512: 'field-cell--512',\n  1024: 'field-cell--1024',\n  2048: 'field-cell--2048',\n};\n\nconst actions = {\n  idle: () => {\n    game.setStatus('playing');\n    actions.playing();\n    messages[0].classList.add('hidden');\n    messages[1].classList.add('hidden');\n    messages[2].classList.add('hidden');\n    messages[3].classList.remove('hidden');\n  },\n  playing: () => {\n    for (let line = 0; line < 4; line++) {\n      for (let column = 0; column < 4; column++) {\n        cells[line * 4 + column].textContent =\n          game.getState()[line][column] || '';\n      }\n    }\n    setStyles();\n    score.textContent = game.getScore();\n  },\n  win: () => {\n    actions.playing();\n    messages[0].classList.add('hidden');\n    messages[1].classList.remove('hidden');\n    messages[2].classList.add('hidden');\n    messages[3].classList.add('hidden');\n  },\n  lose: () => {\n    actions.playing();\n    messages[0].classList.remove('hidden');\n    messages[1].classList.add('hidden');\n    messages[2].classList.add('hidden');\n    messages[3].classList.add('hidden');\n  },\n};\n\nfunction bindState(arg) {\n  actions[arg]();\n}\n\nconst setStyles = () => {\n  for (const cell of cells) {\n    cell.className = bgColorByNumber[cell.textContent]\n      ? 'field-cell ' + bgColorByNumber[cell.textContent]\n      : 'field-cell';\n  }\n};\n\n// Event Listeners\ndocument.addEventListener('keydown', (eventKey) => {\n  if (game.getStatus() === 'playing') {\n    if (eventKey.key === 'ArrowDown') {\n      game.moveDown();\n      bindState(game.getStatus());\n    } else if (eventKey.key === 'ArrowUp') {\n      game.moveUp();\n      bindState(game.getStatus());\n    } else if (eventKey.key === 'ArrowRight') {\n      game.moveRight();\n      bindState(game.getStatus());\n    } else if (eventKey.key === 'ArrowLeft') {\n      game.moveLeft();\n      bindState(game.getStatus());\n    }\n  }\n});\n\nstartAndRestartButton.addEventListener('click', (clickStartRestartEvent) => {\n  game.start();\n  bindState(game.getStatus());\n  setStyles();\n  startAndRestartButton.classList.add('restart');\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  // This are variables used in entire instance of class\n  #SIZE = 4;\n  #score = 0;\n  #state = [];\n  #status = '';\n  #initialState = undefined;\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (!initialState) {\n      this.#state = new Array(this.#SIZE).fill(0);\n\n      for (const i in this.#state) {\n        this.#state[i] = new Array(this.#SIZE).fill(0);\n      }\n\n      this.#initialState = this.#getStateCopy();\n    } else {\n      this.#state = this.#getStateCopy(initialState);\n      this.#initialState = this.#getStateCopy();\n    }\n    this.#status = 'idle';\n  }\n\n  // This is a required method\n  moveLeft() {\n    this.#makeMove();\n  }\n\n  // This is a required method\n  moveRight() {\n    this.#reverse();\n    this.#makeMove();\n    this.#reverse();\n  }\n\n  // This is a required method\n  moveUp() {\n    this.#tranpose();\n    this.#makeMove();\n    this.#tranpose();\n  }\n\n  // This is a required method\n  moveDown() {\n    this.#tranpose();\n    this.#reverse();\n    this.#makeMove();\n    this.#reverse();\n    this.#tranpose();\n  }\n\n  /**\n   * This is a required method.\n   *\n   * @returns {number}\n   */\n  getScore() {\n    return this.#score;\n  }\n\n  /**\n   * This is a requirement method.\n   *\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.#getStateCopy();\n  }\n\n  /**\n   * Returns the current game status.\n   * This is a requirement method\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.#status;\n  }\n\n  /**\n   * Update game status.\n   *\n   * @param {string} value\n   *\n   */\n  setStatus(value) {\n    this.#status = value;\n  }\n\n  /**\n   * This method shoud be private, but the tests consider it as public\n   */\n  start() {\n    this.#score = 0;\n    this.#status = 'playing';\n    this.#state = this.#getStateCopy(this.#initialState);\n\n    // Is called twice by requirements\n    this.#randomizer();\n    this.#randomizer();\n  }\n\n  // Resets the game.\n  restart() {\n    this.#score = 0;\n    this.#status = 'playing';\n    this.#state = this.#getStateCopy(this.#initialState);\n    this.#status = 'idle';\n  }\n\n  /**\n   * Put 2 or 4 in freely cells if they exists\n   */\n  #randomizer() {\n    const empties = [];\n    let idxSorted;\n\n    for (let line = 0; line < this.#SIZE; line++) {\n      for (let column = 0; column < this.#SIZE; column++) {\n        if (this.#state[line][column] === 0) {\n          empties.push([line, column]);\n        }\n      }\n    }\n\n    if (empties.length > 0) {\n      idxSorted = Math.floor(Math.random() * empties.length);\n\n      this.#state[empties[idxSorted][0]][empties[idxSorted][1]] =\n        Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n    }\n  }\n\n  // Matrix transformation transpose operation.\n  #tranpose() {\n    let tempRetriveVar;\n\n    for (let ln = 0; ln < this.#SIZE; ln++) {\n      for (let cl = ln; cl < this.#SIZE; cl++) {\n        tempRetriveVar = this.#state[ln][cl];\n        this.#state[ln][cl] = this.#state[cl][ln];\n        this.#state[cl][ln] = tempRetriveVar;\n      }\n    }\n  }\n\n  // Only reverte this.#state array lines, it dont to revert any array.\n  #reverse() {\n    this.#state.forEach((e, i, arr) => arr[i].reverse());\n  }\n\n  // Check if movements isn't possible than change this.status.\n  #checkIfLose() {\n    let allSides = [];\n\n    for (let column = 0; column < this.#SIZE; column++) {\n      for (let line = 0; line < this.#SIZE; line++) {\n        if (this.#state[line][column] !== 0) {\n          allSides.push(\n            this.#state[line - 1] !== undefined\n              ? this.#state[line - 1][column]\n              : undefined,\n          );\n\n          allSides.push(\n            this.#state[line + 1] !== undefined\n              ? this.#state[line + 1][column]\n              : undefined,\n          );\n          allSides.push(this.#state[line][column + 1]);\n          allSides.push(this.#state[line][column - 1]);\n\n          if (\n            allSides.includes(0) ||\n            allSides.includes(this.#state[line][column])\n          ) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n        allSides = [];\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * This method copy two dimensional array.\n   * In this code is always used to copy the state Two dimensional Array\n   *\n   * @param {Array} arr\n   * @returns\n   */\n  #getStateCopy(arr = this.#state) {\n    return arr.map((e) => [...e]);\n  }\n\n  // Make left movement by default\n  #makeMove() {\n    if (this.#status === 'playing') {\n      const previousState = this.#getStateCopy().flat();\n\n      for (const line in this.#state) {\n        let nonZeros = this.#state[line].filter((e) => e !== 0);\n        let i = 0;\n\n        while (i < nonZeros.length) {\n          if (nonZeros[i + 1] === nonZeros[i]) {\n            nonZeros[i + 1] = 0;\n            nonZeros[i] *= 2;\n            this.#score += nonZeros[i];\n\n            if (nonZeros[i] === 2048) {\n              this.#status = 'win';\n            }\n            i += 2;\n            continue;\n          }\n\n          i++;\n        }\n\n        nonZeros = nonZeros.filter((e) => e !== 0);\n\n        this.#state[line] = [\n          ...nonZeros,\n          ...new Array(this.#SIZE - nonZeros.length).fill(0),\n        ];\n      }\n\n      if (this.#state.flat().some((e, i) => e !== previousState[i])) {\n        this.#randomizer();\n      }\n    }\n\n    this.#status = this.#checkIfLose() ? 'lose' : this.#status;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","SIZE","score","state","status","initialState","undefined","constructor","getStateCopy","i","Array","fill","moveLeft","makeMove","moveRight","reverse","moveUp","tranpose","moveDown","getScore","getState","getStatus","setStatus","value","start","randomizer","restart","idxSorted","empties","line","column","push","length","Math","floor","random","tempRetriveVar","ln","cl","forEach","e","arr","checkIfLose","allSides","includes","map","previousState","flat","nonZeros","filter","some","$09e991522ca7e64e$var$cells","document","getElementsByClassName","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startAndRestartButton","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$bgColorByNumber","$09e991522ca7e64e$var$actions","idle","playing","classList","add","remove","textContent","$09e991522ca7e64e$var$setStyles","win","lose","cell","className","addEventListener","eventKey","key","$09e991522ca7e64e$var$bindState","arg","clickStartRestartEvent"],"version":3,"file":"index.c61a717d.js.map"}